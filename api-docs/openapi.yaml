openapi: 3.0.3
info:
  title: Nexus Platform API
  description: |
    API para gerenciamento de conteúdo da Plataforma Nexus. 
    
    Permite a criação, leitura, atualização e remoção de posts, autores e comentários, seguindo os padrões REST.
    Use esta documentação para integrar seus serviços. Para mais detalhes sobre autenticação, veja nosso [Guia de Autenticação](#).
  version: "1.1.0"
  contact:
    name: API Support
    url: http://www.example.com/support
    email: support@example.com

servers:
  - url: https://api.nexus-platform.com/v1
    description: Servidor de Produção
  - url: https://api.staging.nexus-platform.com/v1
    description: Servidor de Staging (Homologação)
  - url: http://localhost:3000/v1
    description: Servidor de Desenvolvimento Local

tags:
  - name: Posts
    description: Operações relacionadas a posts do blog
  - name: Autores
    description: Gerenciamento de autores
  - name: Comentários
    description: Operações relacionadas a comentários nos posts

paths:
  /posts:
    get:
      tags:
        - Posts
      summary: Lista todos os posts
      description: Retorna uma lista paginada de todos os posts publicados.
      operationId: getPosts
      responses:
        '200':
          description: Uma lista de posts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostsArray'
    post:
      tags:
        - Posts
      summary: Cria um novo post
      description: Adiciona um novo post à plataforma.
      operationId: createPost
      requestBody:
        description: Objeto Post a ser adicionado
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '201':
          description: Post criado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /posts/{postId}:
    get:
      tags:
        - Posts
      summary: Busca um post pelo ID
      description: Retorna um único post baseado no seu ID.
      operationId: getPostById
      parameters:
        - name: postId
          in: path
          required: true
          description: ID numérico do post a ser retornado
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Detalhes do post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags:
        - Posts
      summary: Atualiza um post existente
      operationId: updatePost
      parameters:
        - $ref: '#/components/parameters/PostId'
      requestBody:
        description: Objeto Post com os dados atualizados
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPost'
      responses:
        '200':
          description: Post atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
    delete:
      tags:
        - Posts
      summary: Deleta um post
      operationId: deletePost
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '204':
          description: Post deletado com sucesso.
        '404':
          $ref: '#/components/responses/NotFound'

  /posts/{postId}/comentarios:
    get:
      tags:
        - Comentários
      summary: Lista comentários de um post
      operationId: getPostComments
      parameters:
        - $ref: '#/components/parameters/PostId'
      responses:
        '200':
          description: Uma lista de comentários para o post especificado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentsArray'
        '404':
          $ref: '#/components/responses/NotFound'

  /autores:
    get:
      tags:
        - Autores
      summary: Lista todos os autores
      description: Retorna uma lista de todos os autores cadastrados na plataforma.
      operationId: getAuthors
      responses:
        '200':
          description: Uma lista de autores.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorsArray'

  /autores/{authorId}:
    get:
      tags:
        - Autores
      summary: Busca um autor pelo ID
      description: Retorna os detalhes completos de um único autor.
      operationId: getAuthorById
      parameters:
        - name: authorId
          in: path
          required: true
          description: ID numérico do autor a ser retornado
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Detalhes do autor.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  parameters:
    PostId:
      name: postId
      in: path
      required: true
      description: ID numérico do post
      schema:
        type: integer
        format: int64
  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Explorando a Automação de APIs"
        content:
          type: string
          example: "Neste artigo, vamos mergulhar fundo nas melhores práticas..."
        published_at:
          type: string
          format: date-time
          example: "2025-06-19T20:00:00Z"
        author:
          $ref: '#/components/schemas/AuthorSummary'
    NewPost:
      type: object
      properties:
        title:
          type: string
          example: "Meu Novo Post Incrível"
        content:
          type: string
          example: "Conteúdo detalhado do post."
        author_id:
          type: integer
          format: int64
          example: 42
      required:
        - title
        - content
        - author_id
    Author:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        name:
          type: string
          example: "Matheus Lopes"
        email:
          type: string
          format: email
          example: "matheus.lopes@example.com"
        bio:
          type: string
          example: "Desenvolvedor especialista em automação e CI/CD."
        joined_at:
          type: string
          format: date-time
          example: "2024-01-10T10:00:00Z"
    AuthorSummary:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 42
        name:
          type: string
          example: "Matheus Lopes"
    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 101
        author_name:
          type: string
          example: "Leitor Anônimo"
        body:
          type: string
          example: "Ótimo artigo! Muito esclarecedor."
        created_at:
          type: string
          format: date-time
          example: "2025-06-20T09:00:00Z"
    PostsArray:
      type: array
      items:
        $ref: '#/components/schemas/Post'
    AuthorsArray:
      type: array
      items:
        $ref: '#/components/schemas/AuthorSummary'
    CommentsArray:
      type: array
      items:
        $ref: '#/components/schemas/Comment'
    Error:
      type: object
      properties:
        code:
          type: string
          example: "unprocessable_entity"
        message:
          type: string
          example: "Ocorreu um erro de validação."
        details:
          type: object

  responses:
    NotFound:
      description: O recurso especificado não foi encontrado.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: Erro de validação. A requisição estava bem formada, mas continha erros semânticos.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
